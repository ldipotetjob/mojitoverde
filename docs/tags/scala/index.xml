<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Green Mojito in technology</title>
    <link>https://ldipotetjob.github.io/mojitoverde/tags/scala/</link>
    <description>Recent content in Scala on Green Mojito in technology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Scadip</copyright>
    <lastBuildDate>Tue, 21 Mar 2017 09:00:00 +0000</lastBuildDate><atom:link href="https://ldipotetjob.github.io/mojitoverde/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scala in a nutshell - Collections - List</title>
      <link>https://ldipotetjob.github.io/mojitoverde/posts/2017-03-21-scalanutsheli/</link>
      <pubDate>Tue, 21 Mar 2017 09:00:00 +0000</pubDate>
      
      <guid>https://ldipotetjob.github.io/mojitoverde/posts/2017-03-21-scalanutsheli/</guid>
      <description>In this post I am gonna explain one of the main collection in Scala, List. The performance in this inmutable collection for some scenarios is great with optimal features and not so good in others because this performance is proportional to the size of the collection.
You can find the performance of List and other collections here.
Especific for List this is what we have:
   head tail apply update prepend append insert     C C L L C L -    C	The operation takes (fast) constant time.</description>
    </item>
    
  </channel>
</rss>
